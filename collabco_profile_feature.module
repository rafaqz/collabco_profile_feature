<?php
/**
 * @file
 * Code for the Collabco Profile Feature feature.
 */

include_once 'collabco_profile_feature.features.inc';

/**
 * Implements hook_preprocess_user_pricture().
 */
function collabco_profile_feature_preprocess_user_picture(&$variables) {
  $variables['user_picture'] = '';
  if (variable_get('user_pictures', 0)) {
    $account = $variables['account'];
    $variables['user_picture'] = collabco_profile_feature_load_user_picture($account);
  }
}

/**
 * Implements hook_preprocess_user_pricture().
 */
function collabco_profile_feature_load_user_picture($account) {
  $user_picture = '';
  if (!empty($account->picture)) {
    if (is_numeric($account->picture)) {
      $account->picture = file_load($account->picture);
    }
    if (!empty($account->picture->uri)) {
      $filepath = $account->picture->uri;
    }
  }
  elseif (variable_get('user_picture_default', '')) {
    $filepath = variable_get('user_picture_default', '');
  }
  if (isset($filepath) and (!empty($account->name))) {
    $alt = $account->name;
    $title = $account->name;

    if (module_exists('image') && file_valid_uri($filepath) && $style = variable_get('user_picture_style', '')) {
      $user_picture = theme('image_style', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $title));
    }
    else {
      $user_picture = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $title));
    }
    if (!empty($account->uid) && user_access('access user profiles')) {
      $attributes = array(
        'attributes' => array('title' => t('View user profile.')),
        'html' => TRUE,
      );
      $user_picture = l($user_picture, "user/$account->uid", $attributes);
    }
  }
  return $user_picture;
}

/**
 * To make it work with views you need to create a new views handler field and extend this handler class
 */

class views_collabco_profile_feature_handler_field_user_picture extends views_handler_field_user_picture {

  function render($values) {
    if ($this->options['image_style'] && module_exists('image')) {
      // @todo: Switch to always using theme('user_picture') when it starts
      // supporting image styles. See http://drupal.org/node/1021564
      if ($picture_fid = $this->get_value($values)) {
        $picture = file_load($picture_fid);
        $picture_filepath = $picture->uri;
      }
      else {
        $picture_filepath = variable_get('user_picture_default', '');
      }
      if (file_valid_uri($picture_filepath)) {
        if (!empty($values->{$this->table_alias . '_name'})) {
          $title = $values->{$this->table_alias . '_name'};
          $alt = $values->{$this->table_alias . '_name'};
        }
        else {
          $title = 'no user';
          $alt = 'no user';
        }
        $output = theme('image_style', array('style_name' => $this->options['image_style'], 'path' => $picture_filepath, 'alt' => $alt, 'title' => $title));
        if ($this->options['link_photo_to_profile'] && user_access('access user profiles')) {
          $uid = $this->get_value($values, 'uid');
          $output = l($output, "user/$uid", array('html' => TRUE));
        }
      }
      else {
        $output = '';
      }
    }
    else {
      // Fake an account object.
      $account = new stdClass();
      if ($this->options['link_photo_to_profile']) {
        // Prevent template_preprocess_user_picture from adding a link
        // by not setting the uid.
        $account->uid = $this->get_value($values, 'uid');
      }
      $account->name = $this->get_value($values, 'name');
      $account->mail = $this->get_value($values, 'mail');
      $account->picture = $this->get_value($values);
      $output = theme('user_picture', array('account' => $account));
    }

    return $output;
  }
}

/**
 * hook_views_data_alter().
 */
function collabco_profile_feature_views_data_alter(&$data) {
  foreach ($data as $table => $config) {
    foreach ($config as $item => $item_config) {
      if (isset($item_config['field']['handler']) && $item_config['field']['handler'] == 'views_handler_field_user_picture') {
        $data[$table][$item]['field']['handler'] = 'views_collabco_profile_feature_handler_field_user_picture';
      }
    }
  }

  return $data;
}


/**
 * Implements hook_block_info().
 */
function collabco_profile_feature_block_info() {
  $blocks = array(
    'user_header' => array(
      'info' => t('User Header'),
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function collabco_profile_feature_block_view($delta='') {
  switch($delta) {
    case 'user_header' :
      $block = collabco_profile_feature_build_user_header_block();
      return $block;
  }
} 

/**
 * Build a group header block.
 *
 * @return array
 *   A Drupal build array.
 */
function collabco_profile_feature_build_user_header_block() {
  $account = user_load(1);

  // Get group title and all parent group titles.
  $title = $account->name;

  // Build the tab menu links.
  $path = 'user/' . $account->uid . '/';
  $subpaths = array('Profile' => ''); 
  $tabs = collabco_settings_feature_tabs_integration($path, $subpaths);

  // Build the block render array.
  $block = array();
  $block['content'] = array(
    'header-banner' => array(
      '#type' => 'container',
      '#attributes' => array('class' => array('header-banner', 'user')),
      'header-details' => array(
        '#type' => 'container',
        '#attributes' => array('class' => array('header-details')),
        'header-details-main' => array(
          '#type' => 'container',
          '#attributes' => array('class' => array('header-details-main')),
          'title' => array(
            '#type' => 'markup',
            '#markup' => $title,
            '#weight' => 0,
            '#prefix' => '<h1>',
            '#suffix' => '</h1>'
          ),
        ),
        'header-details-side' => array(
          '#type' => 'container',
          '#attributes' => array('class' => array('header-details-side')),
          'picture' => array(
            '#type' => 'markup',
            '#markup' => collabco_profile_feature_load_user_picture($account),
          ),
        ),
      ),
      'header-content-tab' => $tabs,
    ),
  );
  return $block;
}

