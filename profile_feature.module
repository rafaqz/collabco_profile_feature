<?php
/**
 * @file
 * Code for the Profile Feature.
 */

include_once 'profile_feature.features.inc';

/**
 * Implements hook_preprocess_user_pricture().
 */
function profile_feature_preprocess_user_picture(&$variables) {
  $variables['user_picture'] = '';
  if (variable_get('user_pictures', 0)) {
    $account = $variables['account'];
    $variables['user_picture'] = profile_feature_load_user_picture($account);
  }
}

/**
 * Implements hook_preprocess_user_pricture().
 */
function profile_feature_load_user_picture($account) {
  $user_picture = '';
  if (!empty($account->picture)) {
    if (is_numeric($account->picture)) {
      $account->picture = file_load($account->picture);
    }
    if (!empty($account->picture->uri)) {
      $filepath = $account->picture->uri;
    }
  }
  elseif (variable_get('user_picture_default', '')) {
    $filepath = variable_get('user_picture_default', '');
  }
  if (isset($filepath) and (!empty($account->name))) {
    $alt = $account->name;
    $title = $account->name;

    if (module_exists('image') && file_valid_uri($filepath) && $style = variable_get('user_picture_style', '')) {
      $user_picture = theme('image_style', array('style_name' => $style, 'path' => $filepath, 'alt' => $alt, 'title' => $title));
    }
    else {
      $user_picture = theme('image', array('path' => $filepath, 'alt' => $alt, 'title' => $title));
    }
    if (!empty($account->uid) && user_access('access user profiles')) {
      $attributes = array(
        'attributes' => array('title' => t('View user profile.')),
        'html' => TRUE,
      );
      $user_picture = l($user_picture, "user/$account->uid", $attributes);
    }
  }
  return $user_picture;
}

/**
 * To make it work with views you need to create a new views handler field and extend this handler class
 */

class views_profile_feature_handler_field_user_picture extends views_handler_field_user_picture {

  function render($values) {
    if ($this->options['image_style'] && module_exists('image')) {
      // @todo: Switch to always using theme('user_picture') when it starts
      // supporting image styles. See http://drupal.org/node/1021564
      if ($picture_fid = $this->get_value($values)) {
        $picture = file_load($picture_fid);
        $picture_filepath = $picture->uri;
      }
      else {
        $picture_filepath = variable_get('user_picture_default', '');
      }
      if (file_valid_uri($picture_filepath)) {
        if (!empty($values->{$this->table_alias . '_name'})) {
          $title = $values->{$this->table_alias . '_name'};
          $alt = $values->{$this->table_alias . '_name'};
        }
        else {
          $title = 'no user';
          $alt = 'no user';
        }
        $output = theme('image_style', array('style_name' => $this->options['image_style'], 'path' => $picture_filepath, 'alt' => $alt, 'title' => $title));
        if ($this->options['link_photo_to_profile'] && user_access('access user profiles')) {
          $uid = $this->get_value($values, 'uid');
          $output = l($output, "user/$uid", array('html' => TRUE));
        }
      }
      else {
        $output = '';
      }
    }
    else {
      // Fake an account object.
      $account = new stdClass();
      if ($this->options['link_photo_to_profile']) {
        // Prevent template_preprocess_user_picture from adding a link
        // by not setting the uid.
        $account->uid = $this->get_value($values, 'uid');
      }
      $account->name = $this->get_value($values, 'name');
      $account->mail = $this->get_value($values, 'mail');
      $account->picture = $this->get_value($values);
      $output = theme('user_picture', array('account' => $account));
    }

    return $output;
  }
}

/**
 * hook_views_data_alter().
 */
function profile_feature_views_data_alter(&$data) {
  foreach ($data as $table => $config) {
    foreach ($config as $item => $item_config) {
      if (isset($item_config['field']['handler']) && $item_config['field']['handler'] == 'views_handler_field_user_picture') {
        $data[$table][$item]['field']['handler'] = 'views_profile_feature_handler_field_user_picture';
      }
    }
  }

  return $data;
}

/**
 * Implements hook_block_info().
 */
function profile_feature_block_info() {
  $blocks = array(
    'profile_nav' => array(
      'info' => t('Profile Nav'),
    ),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function profile_feature_block_view($delta='') {
  switch($delta) {
    case 'profile_nav' :
      $block = profile_feature_build_user_profile_nav_block();
      return $block;
  }
} 

/**
 * Build a user account block.
 *
 * @return array
 *   A Drupal build array.
 */
function profile_feature_build_user_profile_nav_block() {
  global $user;
  // Ignore anonymous.
  if ($user->uid == 0) {
    return;
  }

  // Theme user-name as a link.
  $themed_username = theme('username', array('account' => $user));

  // Build list of user roles, replace "authenticated user" with "Member"
  $roles = $user->roles;
  $roles = array_replace($roles, array_fill_keys(array_keys($roles, 'authenticated user'), 'Member'));
  $roles_str = implode(', ', $roles);
  
  // Build list of user groups.
  $group_links = groups_feature_build_user_groups_list();
  $group_link_array = array(
    'links' => $group_links,
    'heading' => array(
      'text' => t('My Groups'),
      'level' => 'h6',
    ),
    'attributes' => array(
      'class' => array('links'),
    ),
  );
  $themed_group_links = theme_links($group_link_array);

  // Build user profile block.
  $block = array();
  $block['content'] = array(
    'profile-nav' => array(
      '#type' => 'container',
      '#attributes' => array('class' => array('profile-nav')),
      'info' => array(
        '#type' => 'container',
        '#attributes' => array('class' => array('profile-nav-info')),
        'account' => array(
          '#type' => 'container',
          '#attributes' => array('class' => array('profile-nav-account')),
          'picture' => array(
            '#type' => 'markup',
            '#markup' => theme('user_picture', array('account' =>$user)),
            '#weight' => -5,
          ),
          'account_text' => array(
            '#type' => 'container',
            '#attributes' => array('class' => array('profile-nav-account-text')),
            'name' => array(
              '#type' => 'markup',
              '#markup' => $themed_username,
              '#weight' => -2,
              '#prefix' => '<h5>',
              '#suffix' => '</h5>',
            ),
            'roles' => array(
              '#type' => 'markup',
              '#markup' => $roles_str,
              '#weight' => -1,
              '#prefix' => '<span class="profile-nav-roles">',
              '#suffix' => '</span>',
            ),
          ),
        ),
        'groups' => array(
        '#type' => 'container',
          '#attributes' => array('class' => array('profile-nav-groups')),
          'links' => array(
            '#type' => 'markup',
            '#markup' => $themed_group_links,
          ),
        ),
      ),
      'actions' => array(
        '#type' => 'container',
        '#attributes' => array('class' => array('profile-nav-actions')),
        '#weight' => 2,
        'edit' => array(
          '#theme' => 'link',
          '#text' => "Edit profile",
          '#path' => "user/{$user->uid}/edit",
          '#options' => array(
            'attributes' => array('class' => array('profile-nav-edit')),
            'html' => TRUE,
          ),
          '#weight' => 0,
        ),
        'log_out' => array(
          '#theme' => 'link',
          '#text' => "Log out",
          '#path' => "user/logout",
          '#options' => array(
            'attributes' => array('class' => array('profile-nav-logout')),
            'html' => TRUE,
          ),
          '#weight' => 1,
        ),
      ),
    ),
  );
  return $block;
} 

